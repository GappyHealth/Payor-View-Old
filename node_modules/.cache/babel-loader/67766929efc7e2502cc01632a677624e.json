{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Gappy\\\\Back-End\\\\Payor-View\\\\src\\\\components\\\\common\\\\measureBody.jsx\";\nimport React, { Component } from 'react';\nimport { CardTitle } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nclass MeasureBody extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isOpen: true\n    };\n\n    this.onToggle = () => {\n      let bool = this.state.isOpen;\n      if (bool == true) bool = false;else bool = true;\n      this.setState({\n        isOpen: bool\n      });\n    };\n  }\n\n  render() {\n    const {\n      title,\n      badgeTitle,\n      badgeColor,\n      controlled,\n      value,\n      valueTitle,\n      link,\n      toggle\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        underline: \"none\",\n        to: link,\n        style: {\n          textDecoration: 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex\",\n          children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n            tag: \"h6\",\n            className: \" text-dark\",\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"badge badge-pill align-self-start ml-auto text-white\",\n            style: {\n              \"background\": badgeColor\n            },\n            children: badgeTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center my-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-success\",\n            children: `${this.state.isOpen == true ? value : controlled}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-primary\",\n            children: valueTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => this.onToggle(),\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: `${this.state.isOpen == true ? \"fa text-dark fa-toggle-off\" : \"fa text-dark fa-toggle-on\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `${this.state.isOpen == true ? \"ml-auto text-danger\" : \"ml-auto text-success\"}`,\n          children: `${this.state.isOpen == true ? \"Open\" : \"Closed\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MeasureBody;","map":{"version":3,"sources":["E:/Gappy/Back-End/Payor-View/src/components/common/measureBody.jsx"],"names":["React","Component","CardTitle","Link","MeasureBody","state","isOpen","onToggle","bool","setState","render","title","badgeTitle","badgeColor","controlled","value","valueTitle","link","toggle","props","textDecoration"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,MAAMC,WAAN,SAA0BH,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAClCI,KADkC,GAC1B;AACNC,MAAAA,MAAM,EAAE;AADF,KAD0B;;AAAA,SAKlCC,QALkC,GAKvB,MAAM;AACf,UAAIC,IAAI,GAAG,KAAKH,KAAL,CAAWC,MAAtB;AAEA,UAAGE,IAAI,IAAI,IAAX,EACEA,IAAI,GAAG,KAAP,CADF,KAGEA,IAAI,GAAG,IAAP;AAEF,WAAKC,QAAL,CAAc;AAACH,QAAAA,MAAM,EAAEE;AAAT,OAAd;AACD,KAdiC;AAAA;;AAgBlCE,EAAAA,MAAM,GAAG;AAEP,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA,UAApB;AAAgCC,MAAAA,UAAhC;AAA4CC,MAAAA,KAA5C;AAAmDC,MAAAA,UAAnD;AAA+DC,MAAAA,IAA/D;AAAqEC,MAAAA;AAArE,QAA+E,KAAKC,KAA1F;AAEA,wBACE;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAuB,QAAA,EAAE,EAAEF,IAA3B;AAAiC,QAAA,KAAK,EAAE;AAAEG,UAAAA,cAAc,EAAE;AAAlB,SAAxC;AAAA,gCACA;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,GAAG,EAAC,IAAf;AAAoB,YAAA,SAAS,EAAC,YAA9B;AAAA,sBAA4CT;AAA5C;AAAA;AAAA;AAAA;AAAA,kBADF,eASE;AAAM,YAAA,SAAS,EAAC,sDAAhB;AAAuE,YAAA,KAAK,EAAE;AAAC,4BAAcE;AAAf,aAA9E;AAAA,sBAA2GD;AAA3G;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAYA;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,kCACA;AAAI,YAAA,SAAS,EAAC,cAAd;AAAA,sBAA+B,GAAE,KAAKP,KAAL,CAAWC,MAAX,IAAqB,IAArB,GAA6BS,KAA7B,GAAuCD,UAAY;AAApF;AAAA;AAAA;AAAA;AAAA,kBADA,eAEE;AAAM,YAAA,SAAS,EAAC,cAAhB;AAAA,sBAAgCE;AAAhC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAkBE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACE;AAAM,UAAA,OAAO,EAAE,MAAM,KAAKT,QAAL,EAArB;AAAA,iCAAsC;AAAG,YAAA,SAAS,EAAG,GAAE,KAAKF,KAAL,CAAWC,MAAX,IAAqB,IAArB,GACnD,4BADmD,GAGnD,2BACA;AAJkC;AAAA;AAAA;AAAA;AAAA;AAAtC;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AAAM,UAAA,SAAS,EAAG,GAAE,KAAKD,KAAL,CAAWC,MAAX,IAAqB,IAArB,GAChB,qBADgB,GAGhB,sBACA,EAJJ;AAAA,oBAKI,GAAE,KAAKD,KAAL,CAAWC,MAAX,IAAqB,IAArB,GACF,MADE,GAGF,QACA;AATJ;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuCD;;AA3DiC;;AA8DpC,eAAeF,WAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { CardTitle } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass MeasureBody extends Component {\r\n  state = {\r\n    isOpen: true\r\n  };\r\n\r\n  onToggle = () => {\r\n    let bool = this.state.isOpen;\r\n\r\n    if(bool == true)\r\n      bool = false;\r\n    else\r\n      bool = true;\r\n\r\n    this.setState({isOpen: bool});\r\n  }\r\n\r\n  render() {\r\n\r\n    const {title, badgeTitle, badgeColor, controlled, value, valueTitle, link, toggle} = this.props;\r\n \r\n    return (\r\n      <div>\r\n        <Link underline=\"none\" to={link} style={{ textDecoration: 'none' }}>\r\n        <div className=\"d-flex\">\r\n          <CardTitle tag=\"h6\" className=\" text-dark\">{title}</CardTitle>\r\n          {/* <Badge\r\n            pill\r\n            color={`${badgeColor}`}\r\n            className=\"align-self-start ml-auto\"\r\n          >\r\n            {badgeTitle}\r\n          </Badge> */}\r\n          <span className=\"badge badge-pill align-self-start ml-auto text-white\" style={{\"background\": badgeColor}}>{badgeTitle}</span>\r\n        </div>\r\n        <div className=\"text-center my-4\">\r\n        <h2 className=\"text-success\">{`${this.state.isOpen == true ? (value) : (controlled)}`}</h2>\r\n          <span className=\"text-primary\">{valueTitle}</span>\r\n        </div>\r\n        </Link>\r\n        <div className=\"d-flex\">\r\n          <span onClick={() => this.onToggle()}><i className={`${this.state.isOpen == true ? (\r\n              \"fa text-dark fa-toggle-off\"\r\n            ) : (\r\n              \"fa text-dark fa-toggle-on\"\r\n            )}`}></i></span>\r\n          <span className={`${this.state.isOpen == true ? (\r\n              \"ml-auto text-danger\"\r\n            ) : (\r\n              \"ml-auto text-success\"\r\n            )}`}>\r\n            {`${this.state.isOpen == true ? (\r\n              \"Open\"\r\n            ) : (\r\n              \"Closed\"\r\n            )}`}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default MeasureBody;"]},"metadata":{},"sourceType":"module"}