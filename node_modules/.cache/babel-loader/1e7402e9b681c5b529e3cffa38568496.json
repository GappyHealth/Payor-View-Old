{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Gappy\\\\Back-End\\\\Payor-View\\\\src\\\\components\\\\gappytv\\\\components\\\\taskSubmission\\\\onComplete.jsx\";\n// Root Imports\nimport React, { Component } from \"react\"; // Component Imports\n\nimport OnSuccess from \"./onSuccess\";\nimport Confirmation from \"./confirmation\"; // Services\n\nimport { serverPOST } from \"../../services/server\";\n\nclass onComplete extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      show: false,\n      pin: \"\"\n    };\n\n    this.handleOnSubmit = e => {\n      e.preventDefault(); // Set Loading to TRUE\n\n      this.setState({\n        isLoading: true\n      }); // Create Patient POST Request\n\n      const {\n        pin\n      } = this.state;\n      const {\n        pt\n      } = this.props;\n      let obj = {\n        pin: pin,\n        patient: pt\n      }; // Send POST Request\n      // TEMPORARY CODE TO MIMIC POST REQUEST\n\n      let response = {\n        staff: \"Zaid Uddin\",\n        status: 0\n      };\n      setTimeout(() => {\n        if (obj.pin == \"1234\") {\n          response.status = 200;\n        } else {\n          response.status = 500;\n        } // Wait for Response\n\n\n        console.log(response); // Call Function Based on Response\n\n        if (response.status == 200) this.handleOnSuccess();else if (response.status == 500) this.handleOnError();\n      }, 3000);\n    };\n\n    this.handleOnChange = ({\n      currentTarget: input\n    }) => {\n      let pin = this.state.pin;\n      pin = input.value;\n      this.setState({\n        pin\n      });\n    };\n  }\n\n  handleOnSuccess() {\n    console.log(\"Success!!!\");\n    this.setState({\n      show: true,\n      isLoading: false\n    });\n  }\n\n  handleOnError() {}\n\n  render() {\n    const {\n      isLoading,\n      show,\n      pin\n    } = this.state;\n    const {\n      count,\n      pt\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"m-5 d-flex justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"spinner-border text-primary\",\n          role: \"status\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"sr-only\",\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this) : show ? /*#__PURE__*/_jsxDEV(OnSuccess, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Confirmation, {\n        count: count,\n        pt: pt,\n        pin: pin,\n        handleOnSubmit: this.handleOnSubmit,\n        handleOnChange: this.handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default onComplete;","map":{"version":3,"sources":["E:/Gappy/Back-End/Payor-View/src/components/gappytv/components/taskSubmission/onComplete.jsx"],"names":["React","Component","OnSuccess","Confirmation","serverPOST","onComplete","state","isLoading","show","pin","handleOnSubmit","e","preventDefault","setState","pt","props","obj","patient","response","staff","status","setTimeout","console","log","handleOnSuccess","handleOnError","handleOnChange","currentTarget","input","value","render","count"],"mappings":"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","sourcesContent":["// Root Imports\r\nimport React, { Component } from \"react\";\r\n\r\n// Component Imports\r\nimport OnSuccess from \"./onSuccess\";\r\nimport Confirmation from \"./confirmation\";\r\n\r\n// Services\r\nimport { serverPOST } from \"../../services/server\";\r\n\r\nclass onComplete extends Component {\r\n  state = {\r\n    isLoading: false,\r\n    show: false,\r\n    pin: \"\",\r\n  };\r\n\r\n  handleOnSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Set Loading to TRUE\r\n    this.setState({ isLoading: true });\r\n\r\n    // Create Patient POST Request\r\n    const { pin } = this.state;\r\n    const { pt } = this.props;\r\n\r\n    let obj = {\r\n      pin: pin,\r\n      patient: pt,\r\n    };\r\n\r\n    // Send POST Request\r\n    // TEMPORARY CODE TO MIMIC POST REQUEST\r\n    let response = {\r\n      staff: \"Zaid Uddin\",\r\n      status: 0,\r\n    };\r\n\r\n    setTimeout(() => {\r\n      if (obj.pin == \"1234\") {\r\n        response.status = 200;\r\n      } else {\r\n        response.status = 500;\r\n      }\r\n\r\n      // Wait for Response\r\n      console.log(response);\r\n\r\n      // Call Function Based on Response\r\n      if (response.status == 200) this.handleOnSuccess();\r\n      else if (response.status == 500) this.handleOnError();\r\n    }, 3000);\r\n  };\r\n\r\n  handleOnChange = ({ currentTarget: input }) => {\r\n    let pin = this.state.pin;\r\n    pin = input.value;\r\n\r\n    this.setState({ pin });\r\n  };\r\n\r\n  handleOnSuccess() {\r\n    console.log(\"Success!!!\");\r\n\r\n    this.setState({ show: true, isLoading: false });\r\n  }\r\n\r\n  handleOnError() {}\r\n\r\n  render() {\r\n    const { isLoading, show, pin } = this.state;\r\n    const { count, pt } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {isLoading ? (\r\n          <div className=\"m-5 d-flex justify-content-center\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n          </div>\r\n        ) : show ? (\r\n          <OnSuccess />\r\n        ) : (\r\n          <Confirmation\r\n            count={count}\r\n            pt={pt}\r\n            pin={pin}\r\n            handleOnSubmit={this.handleOnSubmit}\r\n            handleOnChange={this.handleOnChange}\r\n          />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default onComplete;\r\n"]},"metadata":{},"sourceType":"module"}