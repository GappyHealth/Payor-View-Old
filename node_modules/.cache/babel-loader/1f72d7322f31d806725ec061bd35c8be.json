{"ast":null,"code":"var patients = require(\"./json/patient.json\");\n\nvar taskLibrary = require(\"./json/taskReference.json\");\n\nvar billingcpt = require(\"./json/billingCodes.json\"); // Exports Weekly Tasks\n// Returns JSON Array of Patient Objects\n\n\nexport function getWeekly() {\n  let tasks = patients.weekly;\n  let reference = taskLibrary;\n  let patientList = [];\n\n  for (var i = 0; i < tasks.length; i++) {\n    let tmp = tasks[i]._id;\n    let ref = reference[tmp];\n    let outcome = ref.outcomes;\n    let description = ref.description.replace(/PATIENT/g, tasks[i].firstName + \" \" + tasks[i].lastName);\n    let scheduledTop = outcome.scheduledTop.replace(/PATIENT/g, tasks[i].firstName + \" \" + tasks[i].lastName);\n    let scheduledBottom = outcome.scheduledBottom.replace(/PATIENT/g, tasks[i].firstName + \" \" + tasks[i].lastName);\n    let noAnswerTop = outcome.noAnswerTop.replace(/PATIENT/g, tasks[i].firstName + \" \" + tasks[i].lastName);\n    let noAnswerBottom = outcome.noAnswerBottom.replace(/PATIENT/g, tasks[i].firstName + \" \" + tasks[i].lastName);\n    let pt = {\n      _id: tasks[i]._id,\n      patientID: tasks[i].patientID,\n      firstName: tasks[i].firstName,\n      lastName: tasks[i].lastName,\n      phone: tasks[i].phone,\n      status: tasks[i].status,\n      descriptor: tasks[i].descriptor,\n      task: ref.task,\n      reason: ref.reason,\n      description: description,\n      scheduledTop: scheduledTop,\n      scheduledBottom: scheduledBottom,\n      noAnswerTop: noAnswerTop,\n      noAnswerBottom: noAnswerBottom\n    };\n    patientList.push(pt);\n  }\n\n  console.log(patientList);\n  return patientList;\n} // Gets Single Patient Data\n// Return JSON Object\n\nexport function getPatient(path) {\n  let tasks = patients.weekly;\n  let reference = taskLibrary;\n  let pathname = path.split(\"/\");\n  let getID = pathname[3];\n\n  for (var i = 0; i < tasks.length; i++) {\n    if (tasks[i].patientID == getID) {\n      let tmp = tasks[i]._id;\n      let ref = reference[tmp];\n      let outcome = ref.outcomes;\n      let description = ref.description.replace(/PATIENT/g, tasks[i].firstName + \" \" + tasks[i].lastName);\n      let scheduledTop = outcome.scheduledTop.replace(/PATIENT/g, tasks[i].firstName + \" \" + tasks[i].lastName);\n      let scheduledBottom = outcome.scheduledBottom.replace(/PATIENT/g, tasks[i].firstName + \" \" + tasks[i].lastName);\n      let noAnswerTop = outcome.noAnswerTop.replace(/PATIENT/g, tasks[i].firstName + \" \" + tasks[i].lastName);\n      let noAnswerBottom = outcome.noAnswerBottom.replace(/PATIENT/g, tasks[i].firstName + \" \" + tasks[i].lastName);\n      let pt = {\n        _id: tasks[i]._id,\n        patientID: tasks[i].patientID,\n        firstName: tasks[i].firstName,\n        lastName: tasks[i].lastName,\n        phone: tasks[i].phone,\n        status: tasks[i].status,\n        descriptor: tasks[i].descriptor,\n        task: ref.task,\n        reason: ref.reason,\n        description: description,\n        scheduledTop: scheduledTop,\n        scheduledBottom: scheduledBottom,\n        noAnswerTop: noAnswerTop,\n        noAnswerBottom: noAnswerBottom\n      };\n      return pt;\n    }\n  }\n\n  return null;\n}\nexport function getMBC() {\n  let tasks = patients.monthly;\n  let ref = taskLibrary;\n  let patientList = {\n    meta: {},\n    patients: []\n  };\n\n  for (var i = 0; i < tasks.length; i++) {\n    if (tasks[i]._id == \"mbc\") {\n      patientList.meta = ref.mbc;\n      patientList.patients.push(tasks[i]);\n    }\n  }\n\n  console.log(patientList);\n  return patientList;\n}\nexport function getBillCPT() {\n  return billingcpt;\n}\nexport function serverPOST(obj) {}","map":{"version":3,"sources":["E:/Gappy/Back-End/Payor-View/src/components/gappytv/services/server.js"],"names":["patients","require","taskLibrary","billingcpt","getWeekly","tasks","weekly","reference","patientList","i","length","tmp","_id","ref","outcome","outcomes","description","replace","firstName","lastName","scheduledTop","scheduledBottom","noAnswerTop","noAnswerBottom","pt","patientID","phone","status","descriptor","task","reason","push","console","log","getPatient","path","pathname","split","getID","getMBC","monthly","meta","mbc","getBillCPT","serverPOST","obj"],"mappings":"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","sourcesContent":["var patients = require(\"./json/patient.json\");\r\nvar taskLibrary = require(\"./json/taskReference.json\");\r\nvar billingcpt = require(\"./json/billingCodes.json\");\r\n\r\n// Exports Weekly Tasks\r\n// Returns JSON Array of Patient Objects\r\nexport function getWeekly() {\r\n  let tasks = patients.weekly;\r\n  let reference = taskLibrary;\r\n  let patientList = [];\r\n\r\n  for (var i = 0; i < tasks.length; i++) {\r\n    let tmp = tasks[i]._id;\r\n\r\n    let ref = reference[tmp];\r\n\r\n    let outcome = ref.outcomes;\r\n\r\n    let description = ref.description.replace(\r\n      /PATIENT/g,\r\n      tasks[i].firstName + \" \" + tasks[i].lastName\r\n    );\r\n    let scheduledTop = outcome.scheduledTop.replace(\r\n      /PATIENT/g,\r\n      tasks[i].firstName + \" \" + tasks[i].lastName\r\n    );\r\n    let scheduledBottom = outcome.scheduledBottom.replace(\r\n      /PATIENT/g,\r\n      tasks[i].firstName + \" \" + tasks[i].lastName\r\n    );\r\n    let noAnswerTop = outcome.noAnswerTop.replace(\r\n      /PATIENT/g,\r\n      tasks[i].firstName + \" \" + tasks[i].lastName\r\n    );\r\n    let noAnswerBottom = outcome.noAnswerBottom.replace(\r\n      /PATIENT/g,\r\n      tasks[i].firstName + \" \" + tasks[i].lastName\r\n    );\r\n\r\n    let pt = {\r\n      _id: tasks[i]._id,\r\n      patientID: tasks[i].patientID,\r\n      firstName: tasks[i].firstName,\r\n      lastName: tasks[i].lastName,\r\n      phone: tasks[i].phone,\r\n      status: tasks[i].status,\r\n      descriptor: tasks[i].descriptor,\r\n      task: ref.task,\r\n      reason: ref.reason,\r\n      description: description,\r\n      scheduledTop: scheduledTop,\r\n      scheduledBottom: scheduledBottom,\r\n      noAnswerTop: noAnswerTop,\r\n      noAnswerBottom: noAnswerBottom,\r\n    };\r\n\r\n    patientList.push(pt);\r\n  }\r\n\r\n  console.log(patientList);\r\n\r\n  return patientList;\r\n}\r\n\r\n// Gets Single Patient Data\r\n// Return JSON Object\r\nexport function getPatient(path) {\r\n  let tasks = patients.weekly;\r\n  let reference = taskLibrary;\r\n\r\n  let pathname = path.split(\"/\");\r\n  let getID = pathname[3];\r\n\r\n  for (var i = 0; i < tasks.length; i++) {\r\n    if (tasks[i].patientID == getID) {\r\n      let tmp = tasks[i]._id;\r\n\r\n      let ref = reference[tmp];\r\n\r\n      let outcome = ref.outcomes;\r\n\r\n      let description = ref.description.replace(\r\n        /PATIENT/g,\r\n        tasks[i].firstName + \" \" + tasks[i].lastName\r\n      );\r\n      let scheduledTop = outcome.scheduledTop.replace(\r\n        /PATIENT/g,\r\n        tasks[i].firstName + \" \" + tasks[i].lastName\r\n      );\r\n      let scheduledBottom = outcome.scheduledBottom.replace(\r\n        /PATIENT/g,\r\n        tasks[i].firstName + \" \" + tasks[i].lastName\r\n      );\r\n      let noAnswerTop = outcome.noAnswerTop.replace(\r\n        /PATIENT/g,\r\n        tasks[i].firstName + \" \" + tasks[i].lastName\r\n      );\r\n      let noAnswerBottom = outcome.noAnswerBottom.replace(\r\n        /PATIENT/g,\r\n        tasks[i].firstName + \" \" + tasks[i].lastName\r\n      );\r\n\r\n      let pt = {\r\n        _id: tasks[i]._id,\r\n        patientID: tasks[i].patientID,\r\n        firstName: tasks[i].firstName,\r\n        lastName: tasks[i].lastName,\r\n        phone: tasks[i].phone,\r\n        status: tasks[i].status,\r\n        descriptor: tasks[i].descriptor,\r\n        task: ref.task,\r\n        reason: ref.reason,\r\n        description: description,\r\n        scheduledTop: scheduledTop,\r\n        scheduledBottom: scheduledBottom,\r\n        noAnswerTop: noAnswerTop,\r\n        noAnswerBottom: noAnswerBottom,\r\n      };\r\n\r\n      return pt;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function getMBC() {\r\n   let tasks = patients.monthly;\r\n   let ref = taskLibrary;\r\n   let patientList = {\r\n      meta: {},\r\n      patients: []\r\n   };\r\n\r\n   for (var i = 0; i < tasks.length; i++) {\r\n      if (tasks[i]._id == \"mbc\") {\r\n         patientList.meta = ref.mbc;\r\n         patientList.patients.push(tasks[i]);\r\n      }\r\n   }\r\n\r\n   console.log(patientList);\r\n\r\n   return patientList;\r\n}\r\n\r\nexport function getBillCPT() {\r\n   return billingcpt;\r\n}\r\n\r\nexport function serverPOST(obj){\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module"}